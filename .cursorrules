# üîí Cursor IDE Security Rules
# Apply these security patterns to ALL web projects automatically

## üõ°Ô∏è SECURITY REQUIREMENTS FOR ALL WEB PROJECTS

### MANDATORY SECURITY HEADERS
When creating or editing HTML files, ALWAYS include these security headers:

```html
<!-- Security Headers - REQUIRED FOR ALL PROJECTS -->
<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; connect-src 'self' https://api.trusted.com; img-src 'self' data: https:; font-src 'self' https://cdnjs.cloudflare.com;">
<meta http-equiv="X-Content-Type-Options" content="nosniff">
<meta http-equiv="X-Frame-Options" content="DENY">
<meta http-equiv="X-XSS-Protection" content="1; mode=block">
<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">
```

### MANDATORY INPUT VALIDATION
When handling user input, ALWAYS implement:

1. **Input Sanitization**:
```javascript
function sanitizeInput(input) {
    if (typeof input !== 'string') return '';
    return input.replace(/[<>\"'&]/g, function(match) {
        const escapeMap = {
            '<': '&lt;', '>': '&gt;', '"': '&quot;',
            "'": '&#x27;', '&': '&amp;'
        };
        return escapeMap[match];
    }).trim();
}
```

2. **Input Validation**:
```javascript
function validateNumericInput(input) {
    const sanitized = sanitizeInput(input);
    if (!sanitized) return { isValid: false, value: null, error: 'Input cannot be empty' };
    
    const numberRegex = /^-?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?$/;
    if (!numberRegex.test(sanitized)) {
        return { isValid: false, value: null, error: 'Invalid number format' };
    }
    
    const numValue = parseFloat(sanitized);
    if (Math.abs(numValue) > 1e15) {
        return { isValid: false, value: null, error: 'Number too large' };
    }
    
    return { isValid: true, value: numValue, error: null };
}
```

### MANDATORY RATE LIMITING
For any application with user interactions, implement rate limiting:

```javascript
class RateLimiter {
    constructor(limit = 60, window = 60000) {
        this.requests = new Map();
        this.limit = limit;
        this.window = window;
    }
    
    checkLimit(identifier) {
        const now = Date.now();
        const userRequests = this.requests.get(identifier) || [];
        const validRequests = userRequests.filter(time => now - time < this.window);
        
        if (validRequests.length >= this.limit) return false;
        
        validRequests.push(now);
        this.requests.set(identifier, validRequests);
        return true;
    }
}
```

### MANDATORY API SECURITY
When making API calls, ALWAYS:

1. **Validate API responses**:
```javascript
function validateApiResponse(data, expectedType = 'object') {
    if (!data) return false;
    if (typeof data !== expectedType) return false;
    if (data.error && typeof data.error === 'string') return false;
    return true;
}
```

2. **Use HTTPS only**:
```javascript
// ALWAYS use HTTPS for API calls
const response = await fetch('https://api.example.com/data');
```

### MANDATORY ERROR HANDLING
Always implement comprehensive error handling:

```javascript
try {
    // Your code here
} catch (error) {
    console.error('Error:', error);
    // Log security events
    if (typeof SecurityUtils !== 'undefined') {
        SecurityUtils.logSecurityEvent('error', { error: error.message });
    }
    // Provide user-friendly error message
    return { success: false, error: 'An error occurred' };
}
```

## üö® SECURITY CHECKLIST FOR EVERY PROJECT

Before deploying ANY web project, verify:

- [ ] Security headers implemented
- [ ] Input validation on all user inputs
- [ ] Output encoding for all user data
- [ ] Rate limiting implemented
- [ ] HTTPS used in production
- [ ] API responses validated
- [ ] Error handling comprehensive
- [ ] No sensitive data in client-side code
- [ ] CSP policy configured
- [ ] Security testing completed

## üìö MANDATORY DOCUMENTATION

For every project, create:

1. **SECURITY_GUIDE.md** - Security measures and best practices
2. **API_DOCUMENTATION.md** - API integration and security
3. **TROUBLESHOOTING_GUIDE.md** - Common issues and solutions
4. **README.md** - Include security features section

## üîß FRAMEWORK-SPECIFIC RULES

### React Projects
- Use React's built-in XSS protection
- Implement PropTypes for validation
- Use React Router for secure navigation
- Implement error boundaries

### Vue.js Projects
- Use Vue's built-in XSS protection
- Implement v-model validation
- Use Vue Router for secure navigation
- Implement error handling

### Node.js/Express Projects
- Use helmet.js for security headers
- Implement express-rate-limit
- Use express-validator for input validation
- Implement CORS properly

### Static Sites
- Include security meta tags
- Implement client-side validation
- Use service workers for security
- Implement CSP properly

## üö´ SECURITY ANTI-PATTERNS TO AVOID

- ‚ùå Never use `eval()` or `innerHTML` with user data
- ‚ùå Never store sensitive data in localStorage
- ‚ùå Never disable security headers
- ‚ùå Never skip input validation
- ‚ùå Never use HTTP in production
- ‚ùå Never ignore error handling
- ‚ùå Never trust user input
- ‚ùå Never skip rate limiting

## üéØ REMEMBER

**Security is not optional - it's mandatory for every web project!**

Apply these patterns consistently across all your projects to ensure:
- User data protection
- Application security
- Professional standards
- Client confidence
- Production readiness
